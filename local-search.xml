<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ 01</title>
    <link href="/blog/20200207/"/>
    <url>/blog/20200207/</url>
    
    <content type="html"><![CDATA[<p>第一章 基本数据类型、运算符与表达式<br>第二章 C++程序的流程控制<br>第三章 数组<br>第四章 C++函数与程序结构</p><a id="more"></a><h1 id="第一章-基本数据类型、运算符与表达式"><a href="#第一章-基本数据类型、运算符与表达式" class="headerlink" title="第一章 基本数据类型、运算符与表达式"></a>第一章 基本数据类型、运算符与表达式</h1><h2 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h2><h3 id="1-1-1-基本数据类型"><a href="#1-1-1-基本数据类型" class="headerlink" title="1.1.1 基本数据类型"></a>1.1.1 基本数据类型</h3><p>逻辑型：bool<br>字符型：char 1个字节<br>整型：int<br>浮点型：float 4个字节 double 8个字节<br>空类型：void 说明函数没有返回值</p><p>修饰符：<br>signed：有符号<br>unsigned：无符号<br>short：修饰int<br>long：修饰int和double</p><h3 id="1-1-2-复合数据类型"><a href="#1-1-2-复合数据类型" class="headerlink" title="1.1.2 复合数据类型"></a>1.1.2 复合数据类型</h3><ol><li>数组：具有相同数据类型的元素组成的集合</li><li>结构体：由不同的数据据类型构成的混合数据结构，数据成员在内存中占据不同的存储单元</li><li>共同体：与结构体类似，不同在于数据成员共用同一段内存单元</li><li>枚举：将变量的值一一列举出来，每个枚举符都与一个整数相对应 枚举符所赋的值从0开始递增</li><li>指针类型：用于存储零一变量的地址，在内存中占据一个存储单元</li><li>类类型：类是体现面对对象程序设计的最基本特征，也是体现C++与C最大的不同之处。类由数据和方法组成，描述了属于该类型的所有对象的性质</li></ol><h2 id="1-2-变量与常量"><a href="#1-2-变量与常量" class="headerlink" title="1.2 变量与常量"></a>1.2 变量与常量</h2><h3 id="1-2-1-变量：运行期间值可以改变"><a href="#1-2-1-变量：运行期间值可以改变" class="headerlink" title="1.2.1 变量：运行期间值可以改变"></a>1.2.1 变量：运行期间值可以改变</h3><p>三个特征：变量类型、变量名、变量值<br>命名：遵循标识符命名规则。只能由字母、数字和下划线组成，且以字母或下划线开头</p><h3 id="1-2-2-常量：程序执行期间值不变"><a href="#1-2-2-常量：程序执行期间值不变" class="headerlink" title="1.2.2 常量：程序执行期间值不变"></a>1.2.2 常量：程序执行期间值不变</h3><p>主要有：布尔常量、字符常量、字符串常量、整性常量、浮点数常量、枚举常量、符号常量</p><h2 id="1-3-运算符与表达式"><a href="#1-3-运算符与表达式" class="headerlink" title="1.3 运算符与表达式"></a>1.3 运算符与表达式</h2><p>表达式是计算求值的基本单位，有运算符和运算数组成。<br>运算数包括变量、常量和函数等。<br>运算符按其在表达式中与运算对象的关系可分为：单目运算、双目运算、三目运算</p><h2 id="1-4-简单输入和输出"><a href="#1-4-简单输入和输出" class="headerlink" title="1.4 简单输入和输出"></a>1.4 简单输入和输出</h2><p>C++中，I/O使用了流的概念-字符（或字节）流。<br>头文件：iostream.h用于提供基本的输入输出功能，iomanip.h用于提供格式化的功能</p><h3 id="1-4-1-I-O的书写格式（基本数据类型的输入输出）"><a href="#1-4-1-I-O的书写格式（基本数据类型的输入输出）" class="headerlink" title="1.4.1 I/O的书写格式（基本数据类型的输入输出）"></a>1.4.1 I/O的书写格式（基本数据类型的输入输出）</h3><p>头文件iostream,h包括有cin和cout对象，对应于标准输入流和标准输出流。<br>‘&gt;&gt;’表述流的输入，从cin输入流中读取字符；’&lt;&lt;’表示流的输出，可以向cout输出流插入字符</p><h1 id="第二章-C-程序的流程控制"><a href="#第二章-C-程序的流程控制" class="headerlink" title="第二章 C++程序的流程控制"></a>第二章 C++程序的流程控制</h1><ol><li>顺序控制语句：声明语句、表达式语句、输入输出语句等</li><li>选择控制语句：if语句和switch语句</li><li>循环控制语句：while语句、do···while语句、for语句</li><li>跳转语句：break语句、continue语句</li></ol><h1 id="第三章-数组"><a href="#第三章-数组" class="headerlink" title="第三章 数组"></a>第三章 数组</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p>数组由一组具有相同数据类型的元素组成的集合。构成数组的这组元素在内存中占用一组连续的存储单元</p><h3 id="3-1-1-一维数组"><a href="#3-1-1-一维数组" class="headerlink" title="3.1.1 一维数组"></a>3.1.1 一维数组</h3><ol><li>定义：类型 数组名[常量表达式];</li><li>初始化：类型 数组名[常量表达式]={值1，值2，···，值n};</li><li>访问数组元素：数组名[下标]</li></ol><h3 id="3-1-2-二维数组"><a href="#3-1-2-二维数组" class="headerlink" title="3.1.2 二维数组"></a>3.1.2 二维数组</h3><ol><li>定义：类型 数组名[常量表达式1][常量表达式2];</li><li>初始化：主要有两种形式：<br>数组按行用花括号分组对二维数组初始化；<br>所有数组按顺序在一个花括号中给出</li><li>访问数组元素：数组名[下标1][下标2]</li></ol><h1 id="第四章-C-函数与程序结构"><a href="#第四章-C-函数与程序结构" class="headerlink" title="第四章 C++函数与程序结构"></a>第四章 C++函数与程序结构</h1><h2 id="4-1-函数的定义与函数原型"><a href="#4-1-函数的定义与函数原型" class="headerlink" title="4.1 函数的定义与函数原型"></a>4.1 函数的定义与函数原型</h2><h3 id="4-1-1-函数的定义"><a href="#4-1-1-函数的定义" class="headerlink" title="4.1.1 函数的定义"></a>4.1.1 函数的定义</h3><p>格式：函数类型 函数名 （形式参数列表）<br>{<br>函数体<br>}</p><h3 id="4-1-2-函数原型"><a href="#4-1-2-函数原型" class="headerlink" title="4.1.2 函数原型"></a>4.1.2 函数原型</h3><p>函数原型告诉编译器函数名、函数类型、函数参数个数及类型。编译器可以对函数调用进行检查。<br>格式：函数类型 函数名（形式参数列表）；</p><h2 id="4-2-函数的调用方法与函数的参数传递规则"><a href="#4-2-函数的调用方法与函数的参数传递规则" class="headerlink" title="4.2 函数的调用方法与函数的参数传递规则"></a>4.2 函数的调用方法与函数的参数传递规则</h2><h3 id="4-2-1-函数的调用方法"><a href="#4-2-1-函数的调用方法" class="headerlink" title="4.2.1 函数的调用方法"></a>4.2.1 函数的调用方法</h3><ol><li>使用函数（即函数调用）主要有三种方式：将函数用作一个独立的表达式语句；用作某条语句的一部分；用作另一个函数的实参</li><li>格式： 函数名（实际参数列表）</li><li>函数调用的过程：首先传递参数，其次执行函数体，最后返回调用该函数的位置</li></ol><h3 id="4-2-2-参数传递规则"><a href="#4-2-2-参数传递规则" class="headerlink" title="4.2.2 参数传递规则"></a>4.2.2 参数传递规则</h3><p>在函数调用时，实参要向形参传递信息使形参具有确切的含义（即使形参具有对应的存储空间和初值）。<br>参数传递主要有两种方式：按值传递和引用传递</p><ol><li>按值传递：按值传递参数时，生成实际参数值的副本并传递给被调用函数的形式参数，形参值的改变不会影响到实参</li><li>引用传递：引用传递时将形参作为实参的别名，所以通过形参可以直接访问实参数据，也就是说对形参值的改变就是对实参值的改变。<br>引用传递中需在定义形式参数时在形参前加引用符’&amp;’</li><li>地址传递：地址传递是将实参的地址传递给形参，所以对形参所指地址中的内容进行修改也会是实参值发生改变。<br>按地址传递中需将形式参数的类型定义为指针类型</li></ol><h2 id="4-3-带有默认参数的函数"><a href="#4-3-带有默认参数的函数" class="headerlink" title="4.3 带有默认参数的函数"></a>4.3 带有默认参数的函数</h2><p>程序员可以指定参数的默认值。当调用程序没有给出实参时，按指定的默认值为形参赋值。<br>函数调用时实参与形参按照从左到右的顺序匹配，当实参全部匹配而形参还有剩余时，则剩下的形参采用默认值。<br>在对默认值进行定义时应该从右向左定义，在一个没有默认值的参数的最左边又出现有默认值的参数时错误的。<br>默认参数应在函数名首次出现时定义。</p><h2 id="4-4-内联函数"><a href="#4-4-内联函数" class="headerlink" title="4.4 内联函数"></a>4.4 内联函数</h2><p>当程序执行到调用普通函数时程序就转去执行该函数，执行完该被调用函数后再返回到调用函数。<br>对于内联函数在编译阶段编译器就把每个出现调用该内联函数的地方都用该函式体中的代码替代。<br>因此内联函数的使用会减少函数调用的开销，但是会增加程序的长度。</p><h2 id="4-5-函数重载"><a href="#4-5-函数重载" class="headerlink" title="4.5 函数重载"></a>4.5 函数重载</h2><p>函数重载是指同一个函数名可以对应多个函数实现。也就是说这些函数具有相同的函数名，完成含义相同的工作<br>但是他们具有不同的参数（即参数个数或参数类型不同），在函数调用时根据参数的类型、个数决定具体调用哪个函数。<br>函数重载时首先进行参数完全匹配，当无法完全匹配时，按隐式数据类型转换的方向进行匹配，仍无法匹配时，则报错。<br>函数重载解析与函数定义或声明的顺序无关。当多个函数参数个数及类型均相同，只有函数返回值类型不同时则报错。</p><h2 id="4-6-数组参数"><a href="#4-6-数组参数" class="headerlink" title="4.6 数组参数"></a>4.6 数组参数</h2><p>数组作为寒素参数时，它传递的时数组中第0个元素的地址（指针）。因此在被调用函数中对新参数组值的改变将被应用到实参数组。<br>数组常速不是参数类型的一部分，函数不知道传递给它的数组的实际长度，当编译器对实参类型惊醒参数类型检查时并不检查数组的长度，<br>因此在定义形参时可以只写数组名[]，方括号中是否写长度作用相同。</p><h2 id="4-7-变量的作用域与生存期"><a href="#4-7-变量的作用域与生存期" class="headerlink" title="4.7 变量的作用域与生存期"></a>4.7 变量的作用域与生存期</h2><h3 id="4-7-1-局部变量与全局变量"><a href="#4-7-1-局部变量与全局变量" class="headerlink" title="4.7.1 局部变量与全局变量"></a>4.7.1 局部变量与全局变量</h3><ol><li>程序的内存区域：一个程序将操作系统分配给其运行的内存块分为四个区域。<br>代码区，存放程序的代码，即程序中各个函数中的代码块<br>全局数据区，存放程序全局数据和静态数据<br>堆区，存放程序的动态数据<br>栈区，存放程序的局部数据，即各个函数中的数据</li><li>局部变量：在一个函数内部说明的变量是局部变量，旨在该函数范围内有效</li><li>全局变量：在函数外部定义的变量成为外部变量，外部变量不属于任何同一个函数，<br>其作用域：从外部变量的定义位置开始，到本文结束位置。<br>外部变量可被作用域内的所有函数直接引用，所以外部变量又称全局变量。</li></ol><h3 id="4-7-2-静态变量"><a href="#4-7-2-静态变量" class="headerlink" title="4.7.2 静态变量"></a>4.7.2 静态变量</h3><ol><li>静态局部变量<br>定义格式：static 数据类型 内部变量表<br>存储特点：<br>静态局部变量属于静态存储。在程序执行过程中，即使所在函数调用结束也不释放。换句话说，<br>在程序执行期间，静态内部变量始终存在，但其他函数是不能引用它们的。<br>定义但不初始化，则自动赋以’0’（整型和实型）或’\0’（字符型）；<br>且每次调用它们所在的函数时，不在重新赋初值，只是保留上次调用结束时的值。</li><li>静态全局变量<br>在全局变量前加一个static，使该变量只在这个源文件中可用，称之为全局静态变量。<br>全局静态变量就是静态全局变量。<br>静态全局变量对组成该程序的其他源文件时无效的。</li></ol><h3 id="4-7-3-生命期"><a href="#4-7-3-生命期" class="headerlink" title="4.7.3 生命期"></a>4.7.3 生命期</h3><p>静态生命期：这种生命期与程序的运行期相同，只要程序一开始运行，这种生命期的变量就存在，在程序结束时，其生命期就结束。<br>局部生命期：在函数内部声明的变量或者是块中声明的变量具有局部生命期。<br>动态生命期：这种生命期由程序中特定的函数调用（malloc()和free()）或操作符（new和delete）来创建和释放。</p>]]></content>
    
    
    <categories>
      
      <category>文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown手册</title>
    <link href="/blog/20200118/"/>
    <url>/blog/20200118/</url>
    
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 .md, .markdown。</p><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。如下：</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落的换行是使用两个以上空格加上回车，或者在段落后面使用一个空行来表示重新开始一个段落。</p><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><pre><code>*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___~~删除线~~</code></pre><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong><br><del>删除线</del></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>你可以在一行中用三个以上的星号、减号来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><pre><code>------------- *************</code></pre><hr><hr><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：<br><strong>文本加粗</strong><br>** 正常显示星号 **</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记。<br>有序列表使用数字并加上(.)号来表示，如：</p><pre><code>1. 第一项2. 第二项3. 第三项</code></pre><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p><pre><code>1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素  </code></pre><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><pre><code>&gt; 区块引用&gt; 123</code></pre><blockquote><p>区块引用<br>123</p></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表，直接在 &gt; 后使用列表，例如：</p><pre><code>&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项</code></pre><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。如：</p><pre><code>* 第一项    &gt; 123    &gt; 456* 第二项</code></pre><ul><li>第一项<blockquote><p>123<br>456</p></blockquote></li><li>第二项</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来(`)，<br>例如：`printf()` 函数显示为<code>printf()</code></p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 4 个空格或者一个制表符（Tab 键），还可以用 (```) 包裹一段代码,如：<br>```javascript<br>$(document).ready(function () {<br>alert(‘RUNOOB’);<br>});<br>```</p><pre><code class="javascript">$(document).ready(function () {    alert(&#39;RUNOOB&#39;);});</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>[链接名称](链接地址)或者直接使用(链接地址)，例如：<br><a href="www.baidu.com">百度</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code>![图片描述文字](图片地址)![图片描述文字](图片地址 &quot;可选标题&quot;)</code></pre><pre><code>![avatar](https://regnover.xyz/img/avatar.jpg)![avatar](https://regnover.xyz/img/avatar.jpg &quot;avatar&quot;)</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>对齐方式：<br>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p><pre><code>    | 左对齐 | 右对齐 | 居中对齐 |    | :-----| ----: | :----: |    | 单元格 | 单元格 | 单元格 |    | 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 4</title>
    <link href="/blog/20200117/"/>
    <url>/blog/20200117/</url>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br>你可以假设 nums1 和 nums2 不会同时为空。</p><a id="more"></a><p>示例 1:<br>nums1 = [1, 3]，nums2 = [2]<br>则中位数是 2.0<br>示例 2:<br>nums1 = [1, 2]，nums2 = [3, 4]<br>则中位数是 (2 + 3)/2 = 2.5</p>]]></content>
    
    
    <categories>
      
      <category>程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>LeetCode</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>